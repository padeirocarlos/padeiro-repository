package padeiro.exemplo.angular.resource;

import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import padeiro.exemplo.angular.config.EAuthorizedAndAuthenticationConfig;
import padeiro.exemplo.angular.events.CreatedResourceEvent;
import padeiro.exemplo.angular.model.person.PersonEntity;
import padeiro.exemplo.angular.repository.person.IPersonRepository;
import padeiro.exemplo.angular.service.PersonService;

@RestController
@RequestMapping("/person")
@CrossOrigin(maxAge = 10, origins = {EAuthorizedAndAuthenticationConfig._CORS_ORIGINS})
public class PersonResource {

	@Autowired
	private IPersonRepository personRepository;

	@Autowired
	private ApplicationEventPublisher publisher;

	@Autowired
	private PersonService personService;

	/**
	 * @param person
	 * @param response
	 * @return
	 */
	@PostMapping("/createPerson")
	public ResponseEntity<PersonEntity> createPerson(@Valid @RequestBody PersonEntity person,
			HttpServletResponse response) {

		PersonEntity entity = personRepository.save(person);

		publisher.publishEvent(new CreatedResourceEvent(this, response, entity.getId()));

		return ResponseEntity.status(HttpStatus.CREATED).body(entity);
	}

	/**
	 * @param personId
	 */
	@DeleteMapping("/deletePerson/{personId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deletePerson1(@Valid @PathVariable Long personId) {

		personRepository.delete(personId);
	}

	@PutMapping("/updatePerson/{personId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public ResponseEntity<PersonEntity> updatePerson(@Valid @PathVariable Long personId,
			@RequestBody PersonEntity person) {

		PersonEntity personEntity = personService.updatePerson(personId, person);

		return ResponseEntity.ok(personEntity);
	}

	/**
	 * @param id
	 * @return
	 */
	@GetMapping("/findById/{id}")
	public ResponseEntity<PersonEntity> findCategoryByCode(@PathVariable Long id) {

		PersonEntity PersonEntity = personRepository.findOne(id);

		return PersonEntity != null ? ResponseEntity.ok(PersonEntity) : ResponseEntity.notFound().build();
	}

	/**
	 * @return
	 */
	@GetMapping("/findAll")
	public List<PersonEntity> findAll() {

		return personRepository.findAll();
	}

	public ApplicationEventPublisher getPublisher() {
		return publisher;
	}

	public void setPublisher(ApplicationEventPublisher publisher) {
		this.publisher = publisher;
	}

	public PersonService getPersonService() {
		return personService;
	}

	public void setPersonService(PersonService personService) {
		this.personService = personService;
	}

}
