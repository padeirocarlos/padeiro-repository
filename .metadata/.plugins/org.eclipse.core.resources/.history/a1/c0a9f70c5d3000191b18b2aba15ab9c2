package padeiro.exemplo.angular.resource;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import padeiro.exemplo.angular.config.EAuthorizedAndAuthenticationConfig;
import padeiro.exemplo.angular.events.CreatedResourceEvent;
import padeiro.exemplo.angular.model.category.CategoryEntity;
import padeiro.exemplo.angular.repository.category.ICategoryRepository;

@RestController
@RequestMapping("/category")
@CrossOrigin(maxAge = 10, origins = { EAuthorizedAndAuthenticationConfig._CORS_ORIGINS })
public class CategoryResource {

	@Inject
	private ICategoryRepository categoryRepository;

	@Inject
	private ApplicationEventPublisher publisher;

	/**
	 * @param category
	 * @param response
	 * @return
	 */
	@PostMapping("/createCategory")
	public ResponseEntity<CategoryEntity> createCategory(@Valid @RequestBody CategoryEntity category,
			HttpServletResponse response) {

		CategoryEntity entity = categoryRepository.save(category);

		publisher.publishEvent(new CreatedResourceEvent(this, response, entity.getCode()));

		return ResponseEntity.status(HttpStatus.CREATED).body(entity);
	}

	/**
	 * 
	 * @param categoryId
	 * @param response
	 */
	@DeleteMapping("/deleteCategory/{categoryId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deletePerson(@Valid @PathVariable Long categoryId) {
		categoryRepository.delete(categoryId);
	}

	/**
	 * @param code
	 * @return
	 */
	@GetMapping("/findByCode/{code}")
	@CrossOrigin
	public ResponseEntity<CategoryEntity> findCategoryByCode(@PathVariable Long code) {

		CategoryEntity categoryEntity = categoryRepository.findOne(code);

		return categoryEntity != null ? ResponseEntity.ok(categoryEntity) : ResponseEntity.notFound().build();
	}

	/**
	 * @return
	 */
	@GetMapping("/findAll")
	public List<CategoryEntity> findAll() {

		return categoryRepository.findAll();
	}

	public ApplicationEventPublisher getPublisher() {
		return publisher;
	}

	public void setPublisher(ApplicationEventPublisher publisher) {
		this.publisher = publisher;
	}
}
